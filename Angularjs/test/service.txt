$的命名约定
前缀$是表示 Angular自己提供的服务名称，如$scope或$provide等，为了防止冲突，最好避免命名自己开发的服务以为$开头。
如果你检查一个scope内部，你也可能会发现一些属性开头也是以 $开头。这些特性被认为是私有的，并且不应该访问或修改。



原文定义：
Angular services are singletons objects or functions that carry out specific tasks common to web apps.

它是一个单例对象或函数，对外提供特定的功能。

1、首先是一个单例，即无论这个服务被注入到任何地方，对象始终只有一个实例，因此每次访问的都是同一个实例。
2、其次这与我们自己定义一个function然后在其他地方调用不同，因为服务被定义在一个模块中，所以其使用范围是可以被我们管理的。ng的避免全局变量污染意识非常强。







系统内置的服务以$开头，我们也可以自定义服务

自定义服务方式：
1、使用系统内置的$provide服务
2、使用Module的factory方法
3、使用Module的service方法

例1：
var app = angular.module("myapp",[],function($provide){
	$provide.factorry("myService",function(){
		var data = {
			name:"yiyang",
			height:"173"
		}
		return data;
	});
});


例2：
var app = angular.module("myapp",[]);
app.factory("mySerice",function(){
	var data = {
		name:"yiyang",
		height:"173"
	}
	return data;
});


例3：
var app = angular.module("myapp",[]);
app.service("myService",function(){
	this.name = "yiyang";
	this.height = "173";
});


Module的factory和$provide的factory方法是一模一样的

Module的service方法，它没有return任何东西，是因为service方法本身返回一个构造器，系统会自动使用new关键字来创建出一个对象。


这样调用该服务的地方便可以直接通过remoteData.name来访问数据了






使用服务自定义服务
可以有3中使用服务方式：
1、直接传入参数使用
2、传入参数+使用别名
3、直接使用别名+显示声明

例1：
app.controller("test",function($scope,myService){
	console.log("name:"+myService.name+" height:"+myService.height);
});


例2：
app.controller("test",["$scope","myService",function(scope,myser){
	console.log("name:"+myser.name+" height:"+myser.height);
}]);


例3：
app.controller("test",function(scope,myser){
	console.log("name:"+myser.name+" height:"+myser.height);
});
test.$inject = ["$scope","myService"];









服务与服务之间可以有依赖关系，如：

var app = angular.module("myapp",[]);

app.controller("test",["$scope","validation",function($scope,validation){
	$scope.validation = validation;
}]);

app.factory("myService",function(){
	var data = {
		name = "yiyang",
		height = "173"
	}
	return data;
});

app.factory("validation",function(myService){
	return function(){
		if(myService.name=="yiyang"){
			alert("验证通过");
		}else{
			alert("验证失败");
		}
	}
});




Angularjs 提供的标准服务组件
$http   用于处理 XMLHttpRequest
$location   提供当前 URL 的信息
$q     异步请求使用，promise/deferred 模块
$routeProvider    配置路由
$log   日志服务




$http  方法：

$http(config)
	.success(function(data,status,headers,config){})
	.error(function(data,status,headers,config

promise

config为一个JSON对象，其中主要包含该请求的url、data、method等，如{url:"login.do",method:"post",data:{name:"12346",pwd:"123"}}。
method  {String} 请求方式e.g. "GET"."POST"
url {String} 请求的URL地址
params {key,value} 请求参数，将在URL上被拼接成？key=value
data {key,value} 数据，将被放入请求内发送至服务器
cache {boolean} 若为true，在http GET请求时采用默认的$http cache，否则使用$cacheFactory的实例
timeout {number} 设置超时时间


success为请求成功后的回调函数，error为请求失败后的回调函数。
data 响应体
status 相应的状态值
headers 获取getter的函数
config 请求中的config对象，同上第1点 


例：
$http({url:"login.do",{name:"yiyang",password:"12345"}}).success(function(data, status, headers, config){
    alert("success");
}).error(function(data, status, headers, config){
    alert("error");
})


快捷方法：
$http.get()
$http.head()
$http.post()
$http.put()
$http.delete()
$http.jsonp()


缓存：
$http.get('/foo/bar' + itemId, {cache: true})
 .success(function(data){
    data; //{foo : 'bar'}
 })
 .error(function(data,status,headers,config){
    //一些错误处理代码
 });



结合模块和服务
angular.module('MyModule', [], function($provide){
  $provide.factory('S1', function(){
    return 'I am S1';
  });
  $provide.factory('S2', function(){
    return {see: function(){return 'I am S2'}}
  });
});

var app = angular.module('Demo', ['MyModule'], angular.noop);
app.controller('TestCtrl', function($scope, S1, S2){
  console.log(S1)
  console.log(S2.see())
});
